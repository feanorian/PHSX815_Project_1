
"""
Name: Craig Brooks
PHSX 815 Spring 2023
Project # 1
Due Date 2/14/2023
This code reads the data generated by Urn.py, plots histograms for both hypotheses, calculates the IQR and mean draws, plots the log-likelihoods for both hypotheses and creates a box-and whisker plot
"""


import sys
import numpy as np
import matplotlib.pyplot as plt
import csv
import pandas as pd
import seaborn as sns
from scipy.stats import geom
sys.path.append(".")


# main function for our CookieAnalysis Python code
if __name__ == "__main__":

    def green_success(color_list):    
        green_index = []
        for item in color_list:
            for j in range(len(item)):
                if item[j] == "Green":
                    green_index.append(j+1)
                    break
        return green_index
    InputFile1 = 'urn_H0.txt'
    InputFile2 = 'urn_H1.txt'
    
    # Probability of drawing green for urn_H0
    p0 = .35
    # Probability of drawing green for urn_H1
    p1 = .2
    
    # Opens the datafile and reads it into array  
    with open(InputFile1) as file1, open(InputFile2) as file2:
        greens_H0 = [line.rstrip().split() for line in file1]
        greens_H1 = [line.rstrip().split() for line in file2]   
    # Function call to return the first instance of Green for each trial  
    success_H0 = green_success(greens_H0)
    success_H1 = green_success(greens_H1)
    
    H0_iqr = np.quantile(success_H0, [.25, .50, .75])
    H1_iqr = np.quantile(success_H1, [.25, .50, .75])

    # plots a histogram for the urn 1
    sns.histplot(success_H0, stat='probability', discrete=True)
    plt.suptitle(f'# of Picks Until Green for {len(greens_H0)} experiments')
    plt.xlabel('Pick #')
    plt.vlines(H0_iqr[0], ymin=0, ymax=.5, label=f'25th % {H0_iqr[0]}', colors='green')
    plt.vlines(H0_iqr[1], ymin=0, ymax=.5, label=f'50th % {H0_iqr[1]}', colors='red')
    plt.vlines(H0_iqr[2], ymin=0, ymax=.5, label=f'75th % {H0_iqr[2]}', colors='blue')
    plt.vlines(np.mean(success_H0), ymin=0, ymax=.5, label=f'mean {np.mean(success_H0)}', colors='black')   
    #plt.savefig('Figure_1.png')
    plt.legend()
    plt.show()
    
    # plots a histogram for the urn 2
    sns.histplot(success_H1, stat='probability', color = 'orange', discrete=True)
    plt.suptitle(f'# of Picks Until Green for {len(greens_H1)} experiments')
    plt.xlabel('Pick #')
    x1median = np.median(success_H1)
    plt.vlines(H1_iqr[0], ymin=0, ymax=.5, label=f'25th % {H1_iqr[0]}' , colors='green')
    plt.vlines(H1_iqr[1], ymin=0, ymax=.5, label=f'50th % {H1_iqr[1]}', colors='red')
    plt.vlines(H1_iqr[2], ymin=0, ymax=.5, label=f'75th % {H1_iqr[2]}', colors='blue')    
    plt.vlines(np.mean(success_H1), ymin=0, ymax=.5, label=f'mean {np.mean(success_H1)}', colors='black')   
    plt.legend()
    #plt.savefig('Figure_1a.png')
    plt.show()
   
  
    # Calculates log-likelikehood in the assumption H0 is True
    LLR_H0 = [np.log((p0*(1-p0)**(i-1))/(p1*(1-p1)**(i-1))) for i in success_H0]
    # Calculates log-likelikehood in the assumption H1 is True
    LLR_H1 = [np.log((p1*(1-p1)**(i-1))/(p0*(1-p0)**(i-1))) for i in success_H1]
  
    
    # Plots log(probability) vs log-likelihood for the geometric distribution
    sns.histplot(LLR_H0, stat='probability', binwidth=.2, element="step",fill = True, color = 'blue', alpha=.5, label='LLR_HO')
    sns.histplot(LLR_H1, stat='probability', binwidth=.2, element="step",fill = True, color = 'orange', alpha = .25, label='LLR_H1')
    plt.xlabel('$\lambda$ = log[L(H_0) / L(H1)]')
    plt.title(f'Log Probability vs Log-Likelihood for {len(LLR_H0)} Measurements')
    plt.yscale('log')
    plt.legend()
    #plt.savefig('Figure_3.png')
    plt.show()
    
    #reads the dfata into a dataframe and plots a box-and-whisker plot
    df = pd.DataFrame({'urn 1': success_H0, 'urn 2 ':success_H1})
    df_melted = pd.melt(df)
    df_melted = df_melted.rename(columns={'variable': 'urns', 'value': 'counts'})
    fig1, ax1 = plt.subplots()
    sns.boxplot(data=df_melted, x='urns', y='counts')
    ax1.set_title(f'Median draws until green for {len(success_H0)} experiments')
    #plt.savefig('Figure_3.png')
    plt.show()
